// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="l2_dist,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k70tfbv676-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.286000,HLS_SYN_LAT=179,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=5,HLS_SYN_FF=752,HLS_SYN_LUT=834,HLS_VERSION=2018_3}" *)

module l2_dist (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        B_address0,
        B_ce0,
        B_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 37'd1;
parameter    ap_ST_fsm_pp0_stage0 = 37'd2;
parameter    ap_ST_fsm_state12 = 37'd4;
parameter    ap_ST_fsm_state13 = 37'd8;
parameter    ap_ST_fsm_state14 = 37'd16;
parameter    ap_ST_fsm_state15 = 37'd32;
parameter    ap_ST_fsm_state16 = 37'd64;
parameter    ap_ST_fsm_state17 = 37'd128;
parameter    ap_ST_fsm_state18 = 37'd256;
parameter    ap_ST_fsm_state19 = 37'd512;
parameter    ap_ST_fsm_state20 = 37'd1024;
parameter    ap_ST_fsm_state21 = 37'd2048;
parameter    ap_ST_fsm_state22 = 37'd4096;
parameter    ap_ST_fsm_state23 = 37'd8192;
parameter    ap_ST_fsm_state24 = 37'd16384;
parameter    ap_ST_fsm_state25 = 37'd32768;
parameter    ap_ST_fsm_state26 = 37'd65536;
parameter    ap_ST_fsm_state27 = 37'd131072;
parameter    ap_ST_fsm_state28 = 37'd262144;
parameter    ap_ST_fsm_state29 = 37'd524288;
parameter    ap_ST_fsm_state30 = 37'd1048576;
parameter    ap_ST_fsm_state31 = 37'd2097152;
parameter    ap_ST_fsm_state32 = 37'd4194304;
parameter    ap_ST_fsm_state33 = 37'd8388608;
parameter    ap_ST_fsm_state34 = 37'd16777216;
parameter    ap_ST_fsm_state35 = 37'd33554432;
parameter    ap_ST_fsm_state36 = 37'd67108864;
parameter    ap_ST_fsm_state37 = 37'd134217728;
parameter    ap_ST_fsm_state38 = 37'd268435456;
parameter    ap_ST_fsm_state39 = 37'd536870912;
parameter    ap_ST_fsm_state40 = 37'd1073741824;
parameter    ap_ST_fsm_state41 = 37'd2147483648;
parameter    ap_ST_fsm_state42 = 37'd4294967296;
parameter    ap_ST_fsm_state43 = 37'd8589934592;
parameter    ap_ST_fsm_state44 = 37'd17179869184;
parameter    ap_ST_fsm_state45 = 37'd34359738368;
parameter    ap_ST_fsm_state46 = 37'd68719476736;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
output  [4:0] B_address0;
output   B_ce0;
input  [31:0] B_q0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg A_ce0;
reg B_ce0;

(* fsm_encoding = "none" *) reg   [36:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [5:0] i_reg_162;
wire   [31:0] grp_fu_196_p2;
reg   [31:0] reg_205;
reg    ap_enable_reg_pp0_iter5;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond1_reg_326;
reg   [0:0] exitcond1_reg_326_pp0_iter4_reg;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state42;
wire   [31:0] C_q0;
reg   [31:0] reg_212;
wire    ap_CS_fsm_state14;
wire   [0:0] exitcond1_fu_217_p2;
wire    ap_CS_fsm_pp0_stage0;
reg   [0:0] exitcond1_reg_326_pp0_iter1_reg;
reg   [0:0] exitcond1_reg_326_pp0_iter2_reg;
reg   [0:0] exitcond1_reg_326_pp0_iter3_reg;
reg   [0:0] exitcond1_reg_326_pp0_iter5_reg;
reg   [0:0] exitcond1_reg_326_pp0_iter6_reg;
reg   [0:0] exitcond1_reg_326_pp0_iter7_reg;
reg   [0:0] exitcond1_reg_326_pp0_iter8_reg;
wire   [5:0] i_1_fu_223_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [63:0] tmp_fu_229_p1;
reg   [63:0] tmp_reg_335;
reg   [63:0] tmp_reg_335_pp0_iter1_reg;
reg   [63:0] tmp_reg_335_pp0_iter2_reg;
reg   [63:0] tmp_reg_335_pp0_iter3_reg;
reg   [63:0] tmp_reg_335_pp0_iter4_reg;
reg   [63:0] tmp_reg_335_pp0_iter5_reg;
reg   [63:0] tmp_reg_335_pp0_iter6_reg;
reg   [63:0] tmp_reg_335_pp0_iter7_reg;
reg   [63:0] tmp_reg_335_pp0_iter8_reg;
reg   [31:0] A_load_reg_350;
reg   [31:0] B_load_reg_355;
wire   [31:0] grp_fu_201_p2;
reg   [31:0] diff_2_reg_360;
wire    ap_CS_fsm_state13;
wire   [0:0] exitcond_fu_235_p2;
wire   [4:0] tmp_3_fu_246_p1;
reg   [4:0] tmp_3_reg_373;
wire   [5:0] i_2_7_fu_250_p2;
reg   [5:0] i_2_7_reg_384;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state46;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg   [4:0] C_address0;
reg    C_ce0;
reg    C_we0;
reg   [31:0] dist_2_reg_173;
wire    ap_CS_fsm_state12;
reg   [5:0] i1_reg_185;
wire    ap_block_pp0_stage0;
wire   [63:0] tmp_2_fu_241_p1;
wire   [63:0] tmp_2_1_fu_261_p1;
wire   [63:0] tmp_2_2_fu_271_p1;
wire   [63:0] tmp_2_3_fu_281_p1;
wire   [63:0] tmp_2_4_fu_291_p1;
wire   [63:0] tmp_2_5_fu_301_p1;
wire   [63:0] tmp_2_6_fu_311_p1;
wire   [63:0] tmp_2_7_fu_321_p1;
reg   [31:0] grp_fu_196_p0;
reg   [31:0] grp_fu_196_p1;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state43;
wire   [4:0] i_2_s_fu_256_p2;
wire   [4:0] i_2_1_fu_266_p2;
wire   [4:0] i_2_2_fu_276_p2;
wire   [4:0] i_2_3_fu_286_p2;
wire   [4:0] i_2_4_fu_296_p2;
wire   [4:0] i_2_5_fu_306_p2;
wire   [4:0] i_2_6_fu_316_p2;
reg   [1:0] grp_fu_196_opcode;
wire    ap_block_pp0_stage0_00001;
reg   [36:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 37'd1;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
end

l2_dist_C #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
C_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(C_address0),
    .ce0(C_ce0),
    .we0(C_we0),
    .d0(diff_2_reg_360),
    .q0(C_q0)
);

l2_dist_faddfsub_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
l2_dist_faddfsub_bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_196_p0),
    .din1(grp_fu_196_p1),
    .opcode(grp_fu_196_opcode),
    .ce(1'b1),
    .dout(grp_fu_196_p2)
);

l2_dist_fmul_32nscud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
l2_dist_fmul_32nscud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_205),
    .din1(reg_205),
    .ce(1'b1),
    .dout(grp_fu_201_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter9 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        dist_2_reg_173 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        dist_2_reg_173 <= grp_fu_196_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        i1_reg_185 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        i1_reg_185 <= i_2_7_reg_384;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_217_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_162 <= i_1_fu_223_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_162 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_326 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_load_reg_350 <= A_q0;
        B_load_reg_355 <= B_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_326_pp0_iter7_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        diff_2_reg_360 <= grp_fu_201_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond1_reg_326 <= exitcond1_fu_217_p2;
        exitcond1_reg_326_pp0_iter1_reg <= exitcond1_reg_326;
        tmp_reg_335_pp0_iter1_reg[5 : 0] <= tmp_reg_335[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        exitcond1_reg_326_pp0_iter2_reg <= exitcond1_reg_326_pp0_iter1_reg;
        exitcond1_reg_326_pp0_iter3_reg <= exitcond1_reg_326_pp0_iter2_reg;
        exitcond1_reg_326_pp0_iter4_reg <= exitcond1_reg_326_pp0_iter3_reg;
        exitcond1_reg_326_pp0_iter5_reg <= exitcond1_reg_326_pp0_iter4_reg;
        exitcond1_reg_326_pp0_iter6_reg <= exitcond1_reg_326_pp0_iter5_reg;
        exitcond1_reg_326_pp0_iter7_reg <= exitcond1_reg_326_pp0_iter6_reg;
        exitcond1_reg_326_pp0_iter8_reg <= exitcond1_reg_326_pp0_iter7_reg;
        tmp_reg_335_pp0_iter2_reg[5 : 0] <= tmp_reg_335_pp0_iter1_reg[5 : 0];
        tmp_reg_335_pp0_iter3_reg[5 : 0] <= tmp_reg_335_pp0_iter2_reg[5 : 0];
        tmp_reg_335_pp0_iter4_reg[5 : 0] <= tmp_reg_335_pp0_iter3_reg[5 : 0];
        tmp_reg_335_pp0_iter5_reg[5 : 0] <= tmp_reg_335_pp0_iter4_reg[5 : 0];
        tmp_reg_335_pp0_iter6_reg[5 : 0] <= tmp_reg_335_pp0_iter5_reg[5 : 0];
        tmp_reg_335_pp0_iter7_reg[5 : 0] <= tmp_reg_335_pp0_iter6_reg[5 : 0];
        tmp_reg_335_pp0_iter8_reg[5 : 0] <= tmp_reg_335_pp0_iter7_reg[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_235_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        i_2_7_reg_384 <= i_2_7_fu_250_p2;
        tmp_3_reg_373 <= tmp_3_fu_246_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state18) | ((exitcond1_reg_326_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1)))) begin
        reg_205 <= grp_fu_196_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state18))) begin
        reg_212 <= C_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_217_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_reg_335[5 : 0] <= tmp_fu_229_p1[5 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        C_address0 = tmp_2_7_fu_321_p1;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        C_address0 = tmp_2_6_fu_311_p1;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        C_address0 = tmp_2_5_fu_301_p1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        C_address0 = tmp_2_4_fu_291_p1;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        C_address0 = tmp_2_3_fu_281_p1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        C_address0 = tmp_2_2_fu_271_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        C_address0 = tmp_2_1_fu_261_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        C_address0 = tmp_2_fu_241_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        C_address0 = tmp_reg_335_pp0_iter8_reg;
    end else begin
        C_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1)))) begin
        C_ce0 = 1'b1;
    end else begin
        C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_reg_326_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        C_we0 = 1'b1;
    end else begin
        C_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond1_fu_217_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_235_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_235_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_reg_326_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_00001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        grp_fu_196_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state15))) begin
        grp_fu_196_opcode = 2'd0;
    end else begin
        grp_fu_196_opcode = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state19))) begin
        grp_fu_196_p0 = reg_205;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_196_p0 = dist_2_reg_173;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        grp_fu_196_p0 = A_load_reg_350;
    end else begin
        grp_fu_196_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state15))) begin
        grp_fu_196_p1 = reg_212;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        grp_fu_196_p1 = B_load_reg_355;
    end else begin
        grp_fu_196_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond1_fu_217_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter8 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter9 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter8 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter9 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond1_fu_217_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((exitcond_fu_235_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = tmp_fu_229_p1;

assign B_address0 = tmp_fu_229_p1;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd36];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return = dist_2_reg_173;

assign exitcond1_fu_217_p2 = ((i_reg_162 == 6'd32) ? 1'b1 : 1'b0);

assign exitcond_fu_235_p2 = ((i1_reg_185 == 6'd32) ? 1'b1 : 1'b0);

assign i_1_fu_223_p2 = (i_reg_162 + 6'd1);

assign i_2_1_fu_266_p2 = (tmp_3_reg_373 | 5'd2);

assign i_2_2_fu_276_p2 = (tmp_3_reg_373 | 5'd3);

assign i_2_3_fu_286_p2 = (tmp_3_reg_373 | 5'd4);

assign i_2_4_fu_296_p2 = (tmp_3_reg_373 | 5'd5);

assign i_2_5_fu_306_p2 = (tmp_3_reg_373 | 5'd6);

assign i_2_6_fu_316_p2 = (tmp_3_reg_373 | 5'd7);

assign i_2_7_fu_250_p2 = (6'd8 + i1_reg_185);

assign i_2_s_fu_256_p2 = (tmp_3_reg_373 | 5'd1);

assign tmp_2_1_fu_261_p1 = i_2_s_fu_256_p2;

assign tmp_2_2_fu_271_p1 = i_2_1_fu_266_p2;

assign tmp_2_3_fu_281_p1 = i_2_2_fu_276_p2;

assign tmp_2_4_fu_291_p1 = i_2_3_fu_286_p2;

assign tmp_2_5_fu_301_p1 = i_2_4_fu_296_p2;

assign tmp_2_6_fu_311_p1 = i_2_5_fu_306_p2;

assign tmp_2_7_fu_321_p1 = i_2_6_fu_316_p2;

assign tmp_2_fu_241_p1 = i1_reg_185;

assign tmp_3_fu_246_p1 = i1_reg_185[4:0];

assign tmp_fu_229_p1 = i_reg_162;

always @ (posedge ap_clk) begin
    tmp_reg_335[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    tmp_reg_335_pp0_iter1_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    tmp_reg_335_pp0_iter2_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    tmp_reg_335_pp0_iter3_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    tmp_reg_335_pp0_iter4_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    tmp_reg_335_pp0_iter5_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    tmp_reg_335_pp0_iter6_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    tmp_reg_335_pp0_iter7_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    tmp_reg_335_pp0_iter8_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //l2_dist
